This is the beginnings of a tiny utility library for working with HBase in the REPL.

Do not feed the bears.

shared shared shared, shared nothing

Author: Kyle Oba ;; mudphone ;; koba <zat-yo> mudphone.com
---------------------- -- -- -- - - ---- -- - -- -- --- -- - -- --- - - -- -- - - - -

Some notes:
- This currently works with HBase 0.20.0 and as such the HBase 0.20.0 jar must be on 
  your classpath.  It is currently included in lib/java and is put on the REPL
  classpath, if you use the included hbase-repl.sh script.

- While we're on the subject of the classpath, you must have the hbase-site.xml file
  for your HBase set-up in the classpath.  This is how you'll connect to ZK.  I
  think there may be other ways to do this, but I haven't thought of how to do it.
  
  In order to get your hbase-site.xml file on the classpath, you can also invoke the
  hbase-repl.sh script with the HBR_XCP environment variable, pointing to the
  directory, containing the file.
    $> HBR_XCP=/path/to/hbase-site.xml/dir ./hbase-repl.sh

- For rlwrap goodness at the REPL (including tab-completion):
  1) make sure you have rlwrap installed (you can get it from macports if you're a 
     mac drone).  
  2) Also, set up your ~/.inputrc file (a sample is in config/.inputrc).  
  3) Then, create a ~/.clj_completions file (you can run utils/completions.clj to 
  create one). Run this:
    $> hbase-repl.sh utils/completions.clj

- Truncating tables in a pmap is great because it's fast.  However, since the
  truncate calls are executed in agents, the output of the command is not seen.
  The truncate-tables command set up to return a list of maps, which are keyed with
  either :truncated or :error.  There is one map per truncated table.  This return
  structure allows you to see if everything ran as expected.

- Chimpanzees and humans come from a common ancestor.

...... .  . ..... .. .. . .. .................................. ... .... .. ... . ...
Instructions for use:

To get a REPL, you can use the hbase-repl.sh script:
  1) Open hbase.repl.sh and update the HBASE_RUNNER_HOME environment variable.
     It should be the directory that you just cloned from GitHub.
  2) Run it:
    $> ${HBASE_RUNNER_HOME}/hbase-repl.sh

  Note: Since hbase-repl.sh uses rlwrap, if you have it installed, you will get
  Clojure and HBase-Runner tab-completion!
    For example: > (truncate-t<tab> ;;=> (truncate-table
    See rlwrap note above to set up your list of completions.

  Users of the hbase-repl.sh script, do not have to explicity "use" the library
  because it is automatically loaded by the script.

If you're using Emacs, and you're working with Slime, you can include the library
like this:
  > (require 'mudphone.hbase-runner.hbase-repl)

And, you can throw yourself into the namespace if you want, like this:
  > (in-ns 'mudphone.hbase-runner.hbase-repl) 


While in the REPL...

  Create a connection to HBase...
    If you want to work with all tables:
    > (start-hbase-repl "")

    If you would rather provide a table namespace (prefix) 
    > (start-hbase-repl "koba_development")
    ;; the following would force most commands to only work with tables 
    ;; beginning with "koba_development_"

  This prints all HBase tables:
    > (list-all-tables)

  This prints all HBase tables in your "namespace".
    > (list-tables)


  To truncate tables in parallel:
    > (def result (truncate-tables list-o-tables))
    ;; where "list-o-talbes" is a list of tables that you've def-ed somewhere.

  If, you are in the hbase-repl namespace, you can use pretty print:
    > (pp) ;; to see the last result
    or
    > (pprint result)

  I hope to make it easier to find out why things go wrong while pmap-ing the 
  table truncations.  For now, you can do this:
    > (def result (truncate-tables list-o-tables))
    > (filter-errors result)

Truncated tables are keyed with :trunacted.  If there was an error on truncation,
they will be keyed with :error.  You will want to check the console output if there
were errors.  Also, try enable/disable on the tables, as this is frequently a
problem.

The current public API includes:

current-table-ns []
disable-table [table-name]
drop-table [table-name]
dump-table [table-name]
filter-errors [results]
find-all-tables [search-str]
find-tables [search-str]
flush-table [table-name]
flush-table-or-region [table-name-or-region-name]
hbase-admin []
hbase-configuration []
list-all-tables []
list-tables []
major-compact [table-name-or-region-name]
set-current-table-ns [current-ns]
start-hbase-repl
table-disabled? [table-name]
table-enabled? [table-name]
truncate-table [table-name]
truncate-tables [table-name-list]


Enjoy!


TODO:
- Make this a comprehensive replacement for the HBase shell.
- More sensible output from truncate-tables (perhaps with pprint).
- Complete the hydration of tables from Clojure strings.  Currently, you can
    write HBase table schemas to flat file.  But, you can't hydrate them yet.
    See "dump-table" for details.
    In general, this will allow one to save the schema of a HBase database to
    a flat-file.


>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<

Thanks go to:

  Amit Rathore (@amitrathore) - Much code was taken from his clojure util libraries.
  Clojure Contrib Authors - I borrowed and stole much.

  For keeping our HBase up and getting us up to the required number of nodes:
    Siva Jagadeesan (@sivajag)
    Robert J. Berger (@rberger)

  HBase Team:
    For tons of help on IRC and otherwise:
      Michael Stack (@St^Ack)
      Ryan Rawson (@dj_ryan / @ryanobjc) 

  And, everyone else working on HBase.  Thanks!!!